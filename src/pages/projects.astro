---
import ProjectsForm from '~/components/ProjectsForm';
import Layout from '../layouts/Layout.astro';
import { db, eq, projects } from 'astro:db';
import {ProjectsCard} from '~/components/ProjectsCard';
import { Banner } from '~/components/Blog/Banner';

const projectsList = await db.select().from(projects);

const currentUser = await Astro.locals.currentUser()

let isAdmin = false;
if (currentUser && currentUser.publicMetadata && currentUser.publicMetadata.permissions && currentUser.publicMetadata.permissions == 'admin') {
  isAdmin = true;
}

if (Astro.request.method === 'POST') {
  const user = await Astro.locals.currentUser();
  if (user?.publicMetadata?.permissions !== 'admin') {
    throw new Error('You must be signed in and an admin to use this feature');
  }

  const data = await Astro.request.formData();
  const method = data.get('method');

  if (method === 'POST') {
    const url = String(data.get('url')).trim();
    const mode = data.get('mode');

    if (mode === 'edit') {
      const id = Number(data.get('id'));
      if (!id && isNaN(id)) {
        throw new Error('ID is missing or invalid');
      } else {
        await db.update(projects).set({
          url,
        }).where(eq(projects.id, id));
      }
      return Astro.redirect('/projects');
    }
    

      await db.insert(projects).values({
        url,
      });

    return Astro.redirect('/projects');
  } else if (method === 'DELETE') {
    const id = Number(data.get('id'));
    if (isNaN(id)) {
      throw new Error('ID is missing or invalid');
    }

    await db.delete(projects).where(eq(projects.id, id));
    return Astro.redirect('/projects');
  }
}

---
{
  isAdmin ? (
<Layout title="Projects" description="Projects" page="projects">
  <main class="container mx-auto py-4">
    <h1 class="text-3xl font-bold">Projects</h1>
    <br/>
    <hr/>
    <br/>
      <ProjectsForm client:only="react" />
    <br/>
    <hr/>
    <br/>
    <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 p-4 bg-accent-foreground/10 rounded-lg">
      {
        projectsList.map((project) => (
          <ProjectsCard project={project} isAdmin={isAdmin} client:only="react" />
        ))
      }
    </div>
  </main>
</Layout>
  ) : (
  <Layout title="Projects" description="Projects" page="projects">
  <main class="container mx-auto">
    <h1 class="text-3xl font-bold">Projects</h1>
    <br/>
    <hr/>
    <br/>
    <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 p-4 bg-accent-foreground/10 rounded-lg">
      {
        projectsList.map((project) => (
          <ProjectsCard project={project} isAdmin={isAdmin} client:only="react" />
        ))
      }
    </div>
  </main>
</Layout>
  )
}